// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel Init
#pragma kernel Update

#include "Assets/Scripts/Particle/Particle.hlsl"
#include "Assets/Scripts/Particle/Function/GetFieldValue.hlsl"
#include "Assets/Scripts/Particle/Function/Boundary.hlsl"
#include "Assets/Scripts/Utils/Time/Time.hlsl"
#include "Assets/Scripts/Value/SimplexNoise.cginc"
#include "Assets/Scripts/Value/CurlNoise.cginc"
#include "Assets/Scripts/Utils/Sampler/Sampler.hlsl"

[numthreads(16, 1, 1)]
void Init(uint3 id : SV_DispatchThreadID)
{
    _ParticleBuffer[id.x] = initParticle(id.x);
}



[numthreads(16, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
    Particle p = _ParticleBuffer[id.x];
    float rate = getRate(p);
    
    /*float2 grad =  simplexNoiseGrad2D(float3(p.pos.xz/10, _Time/100));
    p.pos += float3(grad.y,0,-grad.x)*0.5*_DeltaTime;*/
    float3 curl =  simplexNoiseCurl3D(float4(p.pos/30, _Time/100));
    if(_UseField)curl = _SourceVec.SampleLevel(linearClampSampler, normPos(p).xz, 0).xyy;
    curl.y = 0;
    p.pos += curl*10*_DeltaTime*geFieldAt(rate);

    p = updateParticle(p, id);

    collideBoundary(p);


    _ParticleBuffer[id.x] = p;
    
}