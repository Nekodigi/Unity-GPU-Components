// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel InitNode NUM_THREAD_X=512
#pragma kernel AppendNode NUM_THREAD_X=512
#pragma kernel CreateVertex NUM_THREAD_X=512

#include "Assets/Scripts/Particle/Particle.hlsl"
#include "Assets/Scripts/Utils/Time/Time.hlsl"
#include "Assets/Scripts/Trail/TrailNode.hlsl"
#include "Assets/Scripts/Utils/Camera/Camera.hlsl"
#include "Assets/Scripts/Utils/Vertex/Vertex.hlsl"

[numthreads(NUM_THREAD_X,1,1)]
void InitNode(uint3 id : SV_DispatchThreadID)
{
    Particle node = (Particle)0;
    node.disable = 1;
    _NodeBuffer[id.x] = node;
}

[numthreads(NUM_THREAD_X,1,1)]
void AppendNode(uint3 id : SV_DispatchThreadID)
{
	uint nodeId = id.x;
    uint trailId = getTrailId(id.x);
    uint nodeStartId = getGlobalNodeIdNoOffset(trailId, 0);

    Trail trail = _TrailBuffer[trailId];
    Particle p = _ParticleBuffer[trailId];
    Particle ref = getNode(trailId, trail.totalInputNum-1);
    if(p.pos.x == ref.pos.x && p.pos.y == ref.pos.y && p.pos.z == ref.pos.z){return;}//if nothing changed, then return.
    Particle node = p;
    node.spawnTime = _Time;
    _NodeBuffer[nodeStartId+trail.totalInputNum] = node;

    trail.totalInputNum += 1;
    trail.totalInputNum %= _NodePerTrail;
	_TrailBuffer[trailId] = trail;
}

[numthreads(NUM_THREAD_X,1,1)]
void CreateVertex(uint3 id : SV_DispatchThreadID)
{
    uint trailId = getTrailId(id.x);
    uint nodeId = getLocalNodeId(trailId, id.x);
    int vertexId = getVertexId(trailId, nodeId);
    Vertex v = _VertexBuffer[vertexId];
    Particle node = getNode(trailId, nodeId);

    float3 toCameraDir = calcToCameraDir(node.pos);
	float3 right = rightFromCamera(getNodeDir(trailId, nodeId), 0.01, toCameraDir);

    v.pos = node.pos-right;
    _VertexBuffer[vertexId] = v;
    v.pos = node.pos+right;
    _VertexBuffer[vertexId+1] = v;
}